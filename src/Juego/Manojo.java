/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Juego;

import Jugador.Cartas;
import java.awt.Image;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.border.Border;

/**
 *
 * @author jomel
 */
public class Manojo extends javax.swing.JPanel {
    Juego juego;
    JLabel[] Manojo;
    public int pos;
    int power = 0;
    /**
     * Creates new form Manojo
     */
    public Manojo(int size, Juego juego) {
        initComponents();
        this.juego = juego;
        switch(size){
            case 2:
                Manojo = new JLabel[7];
                break;
            case 3:
                Manojo = new JLabel[6];
                break;
            case 4:
                Manojo = new JLabel[7];
                break;
            case 6:
                Manojo = new JLabel[5];
                break;
            case 8:
                Manojo = new JLabel[4]; 
                break;
        }
        
        if(size == 8){
                    for(int i= 0; i< Manojo.length; i++){
                        Manojo[i] = new JLabel();
                        Manojo[i].setBounds(25+100*i + 25*i,100,100,100);
                        Manojo[i].setIcon(Cartas.C2.getManojo());
                        Manojo[i].addMouseListener(new java.awt.event.MouseAdapter(){
                            public void mousePressed(java.awt.event.MouseEvent e){
                                SelectedCard(e);
                            }
                        });
                        add(Manojo[i]);
                    }
                }else{
                    int y = 30;
                    int x = 0;
                    for(int i= 0; i< Manojo.length; i++){
                        Manojo[i] = new JLabel();
                        Manojo[i].setBounds(25+100*(i-x) + 25*(i-x),y,100,100);
                        Manojo[i].setIcon(Cartas.C10.getManojo());
                        Manojo[i].addMouseListener(new java.awt.event.MouseAdapter(){
                            public void mousePressed(java.awt.event.MouseEvent e){
                                SelectedCard(e);
                            }
                        });
                        
                        add(Manojo[i]);
                        if(i%3 == 0 && i!=0){
                            y += 130;
                            x = 4;
                        }
                    }
                }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 102, 102));
        setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 494, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 294, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    
    public void SelectedCard(java.awt.event.MouseEvent evt){
        for(int i= 0; i< Manojo.length; i++){
            if(Manojo[i] == evt.getSource()){
                emptyBorder();
                if(Cartas.getImage((ImageIcon)Manojo[i].getIcon()) == 48 ||
                        Cartas.getImage((ImageIcon)Manojo[i].getIcon()) ==50){
                    Border border = new javax.swing.border.LineBorder(new java.awt.Color(0,200,0), 4);
                    juego.bloquear = true;
                    juego.tablero.borderAllnotEmpty();
                    Manojo[i].setBorder(border);
                    pos = i;
                    juego.abilityPower(false);
                }else if(Cartas.getImage((ImageIcon)Manojo[i].getIcon()) ==49 ||
                        Cartas.getImage((ImageIcon)Manojo[i].getIcon()) ==51){
                    juego.bloquear = true;
                    Border border = new javax.swing.border.LineBorder(new java.awt.Color(0,200,0), 4);
                    juego.tablero.borderAllEmpty();
                    Manojo[i].setBorder(border);
                    pos = i;
                    juego.abilityPower(false);
                }else{
                    power = GUI.Inicio.usuario.getPower(Cartas.getImage((ImageIcon)Manojo[i].getIcon()));
                    if(Cartas.getImage((ImageIcon)Manojo[i].getIcon()) >= 40 
                        && Cartas.getImage((ImageIcon)Manojo[i].getIcon()) <=47 
                        && power != 0){
                        juego.abilityPower(true);
                    }else{
                        juego.tablero.movimientoActivado=false;
                        juego.abilityPower(false);
                    }
                    Border border = new javax.swing.border.LineBorder(new java.awt.Color(0,200,0), 4);
                    juego.tablero.detectCard(Cartas.getImage((ImageIcon)Manojo[i].getIcon()));
                    if(juego.tablero.borderisEmpty()){
                        int respuesta = JOptionPane.showConfirmDialog(null, "¿Quieres reemplazar la carta?", "Confirmación", 
                                JOptionPane.YES_NO_CANCEL_OPTION);
                        if (respuesta == JOptionPane.YES_OPTION) {
                            juego.DrawCard(juego.JugadorActual, getSelectCard());
                            juego.Deck_Countdown.setText(Integer.toString(104-juego.size));
                            setManojo();
                        }
                    }
                    juego.bloquear = false;
                    Manojo[i].setBorder(border);
                    pos = i;
                }
            }
        }
    }

    public void emptyBorder(){
        for(int f = 0; f< Manojo.length; f++){
            Manojo[f].setBorder(null);
        }
    }
    
    public void setManojo(){
        Cartas[] cartas = juego.JugadorActual.getManojo();
        for(int i= 0; i< Manojo.length; i++){
            Manojo[i].setIcon(cartas[i].getManojo());
        }
    }
    
    public int getSelectCard(){
        return pos;
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
